(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('rxjs'), require('@angular/core'), require('rxjs/operators'), require('echarts')) :
    typeof define === 'function' && define.amd ? define('ngx-echarts', ['exports', 'rxjs', '@angular/core', 'rxjs/operators', 'echarts'], factory) :
    (factory((global['ngx-echarts'] = {}),global.rxjs,global.ng.core,global.rxjs.operators,global.echarts));
}(this, (function (exports,rxjs,core,operators,echarts) { 'use strict';

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var ChangeFilter = /** @class */ (function () {
        function ChangeFilter(_changes) {
            this._changes = _changes;
        }
        /**
         * @param {?} changes
         * @return {?}
         */
        ChangeFilter.of = /**
         * @param {?} changes
         * @return {?}
         */
            function (changes) {
                return new ChangeFilter(changes);
            };
        /**
         * @template T
         * @param {?} key
         * @return {?}
         */
        ChangeFilter.prototype.notEmpty = /**
         * @template T
         * @param {?} key
         * @return {?}
         */
            function (key) {
                if (this._changes[key]) {
                    /** @type {?} */
                    var value = this._changes[key].currentValue;
                    if (value !== undefined && value !== null) {
                        return rxjs.of(value);
                    }
                }
                return rxjs.empty();
            };
        /**
         * @template T
         * @param {?} key
         * @return {?}
         */
        ChangeFilter.prototype.has = /**
         * @template T
         * @param {?} key
         * @return {?}
         */
            function (key) {
                if (this._changes[key]) {
                    /** @type {?} */
                    var value = this._changes[key].currentValue;
                    return rxjs.of(value);
                }
                return rxjs.empty();
            };
        /**
         * @template T
         * @param {?} key
         * @return {?}
         */
        ChangeFilter.prototype.notFirst = /**
         * @template T
         * @param {?} key
         * @return {?}
         */
            function (key) {
                if (this._changes[key] && !this._changes[key].isFirstChange()) {
                    /** @type {?} */
                    var value = this._changes[key].currentValue;
                    return rxjs.of(value);
                }
                return rxjs.empty();
            };
        /**
         * @template T
         * @param {?} key
         * @return {?}
         */
        ChangeFilter.prototype.notFirstAndEmpty = /**
         * @template T
         * @param {?} key
         * @return {?}
         */
            function (key) {
                if (this._changes[key] && !this._changes[key].isFirstChange()) {
                    /** @type {?} */
                    var value = this._changes[key].currentValue;
                    if (value !== undefined && value !== null) {
                        return rxjs.of(value);
                    }
                }
                return rxjs.empty();
            };
        return ChangeFilter;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var EChartEvents = /** @class */ (function () {
        function EChartEvents() {
        }
        EChartEvents.Click = 'click';
        EChartEvents.DblClick = 'dblclick';
        EChartEvents.MouseDown = 'mousedown';
        EChartEvents.MouseUp = 'mouseup';
        EChartEvents.MouseOver = 'mouseover';
        EChartEvents.MouseOut = 'mouseout';
        EChartEvents.GlobalOut = 'globalout';
        EChartEvents.ContextMenu = 'contextmenu';
        EChartEvents.DataZoom = 'datazoom';
        EChartEvents.MapSelectChanged = 'mapselectchanged';
        EChartEvents.MapSelected = 'mapselected';
        EChartEvents.MapUnselected = 'mapunselected';
        EChartEvents.All = [
            EChartEvents.Click,
            EChartEvents.DblClick,
            EChartEvents.MouseDown,
            EChartEvents.MouseUp,
            EChartEvents.MouseOver,
            EChartEvents.MouseOut,
            EChartEvents.GlobalOut,
            EChartEvents.ContextMenu,
            EChartEvents.DataZoom,
            EChartEvents.MapSelectChanged,
            EChartEvents.MapSelected,
            EChartEvents.MapUnselected,
        ];
        return EChartEvents;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var NgxEchartsDirective = /** @class */ (function () {
        function NgxEchartsDirective(el, _ngZone) {
            this.el = el;
            this._ngZone = _ngZone;
            this.autoResize = true;
            this.loadingType = 'default';
            /**
             * Whether to register event handlers on echartInstance. Default is true.
             * Use it to avoid unwanted change detection, if you want to optimize the performance.
             */
            this.detectEventChanges = true;
            // chart events:
            this.chartInit = new core.EventEmitter();
            this.chartClick = new core.EventEmitter();
            this.chartDblClick = new core.EventEmitter();
            this.chartMouseDown = new core.EventEmitter();
            this.chartMouseUp = new core.EventEmitter();
            this.chartMouseOver = new core.EventEmitter();
            this.chartMouseOut = new core.EventEmitter();
            this.chartGlobalOut = new core.EventEmitter();
            this.chartContextMenu = new core.EventEmitter();
            this.chartDataZoom = new core.EventEmitter();
            this.chartMapSelectChanged = new core.EventEmitter();
            this.chartMapSelected = new core.EventEmitter();
            this.chartMapUnselected = new core.EventEmitter();
            this.currentOffsetWidth = 0;
            this.currentOffsetHeight = 0;
            this._resize$ = new rxjs.Subject();
        }
        /**
         * @return {?}
         */
        NgxEchartsDirective.prototype.createChart = /**
         * @return {?}
         */
            function () {
                var _this = this;
                this.currentWindowWidth = window.innerWidth;
                this.currentOffsetWidth = this.el.nativeElement.offsetWidth;
                this.currentOffsetHeight = this.el.nativeElement.offsetHeight;
                /** @type {?} */
                var dom = this.el.nativeElement;
                if (window && window.getComputedStyle) {
                    /** @type {?} */
                    var prop = window.getComputedStyle(dom, null).getPropertyValue('height');
                    if ((!prop || prop === '0px') &&
                        (!dom.style.height || dom.style.height === '0px')) {
                        dom.style.height = '400px';
                    }
                }
                return this._ngZone.runOutsideAngular(function () { return echarts.init(dom, _this.theme || undefined, _this.initOpts || undefined); });
            };
        /**
         * @param {?} event
         * @return {?}
         */
        NgxEchartsDirective.prototype.onWindowResize = /**
         * @param {?} event
         * @return {?}
         */
            function (event) {
                /** @type {?} */
                var target = ( /** @type {?} */(event.target));
                if (this.autoResize && target.innerWidth !== this.currentWindowWidth) {
                    this.currentWindowWidth = target.innerWidth;
                    this.currentOffsetWidth = this.el.nativeElement.offsetWidth;
                    this.currentOffsetHeight = this.el.nativeElement.offsetHeight;
                    this._resize$.next();
                }
            };
        /**
         * @param {?} changes
         * @return {?}
         */
        NgxEchartsDirective.prototype.ngOnChanges = /**
         * @param {?} changes
         * @return {?}
         */
            function (changes) {
                var _this = this;
                /** @type {?} */
                var filter = ChangeFilter.of(changes);
                filter.notFirstAndEmpty('options').subscribe(function (opt) { return _this.onOptionsChange(opt); });
                filter.notFirstAndEmpty('merge').subscribe(function (opt) { return _this.setOption(opt); });
                filter.has('loading').subscribe(function (v) { return _this.toggleLoading(!!v); });
                filter.notFirst('detectEventChanges').subscribe(function (v) { return _this.toggleEventDetectors(!!v); });
                filter.notFirst('theme').subscribe(function () { return _this.refreshChart(); });
            };
        /**
         * @return {?}
         */
        NgxEchartsDirective.prototype.ngOnDestroy = /**
         * @return {?}
         */
            function () {
                if (this._resizeSub) {
                    this._resizeSub.unsubscribe();
                    this._resizeSub = null;
                }
                if (this._chart) {
                    this._chart.dispose();
                    this._chart = null;
                }
            };
        /**
         * @return {?}
         */
        NgxEchartsDirective.prototype.ngDoCheck = /**
         * @return {?}
         */
            function () {
                // No heavy work in DoCheck!
                if (this._chart && this.autoResize) {
                    /** @type {?} */
                    var offsetWidth = this.el.nativeElement.offsetWidth;
                    /** @type {?} */
                    var offsetHeight = this.el.nativeElement.offsetHeight;
                    if (this.currentOffsetWidth !== offsetWidth || this.currentOffsetHeight !== offsetHeight) {
                        this.currentOffsetWidth = offsetWidth;
                        this.currentOffsetHeight = offsetHeight;
                        this._resize$.next();
                    }
                }
            };
        /**
         * @return {?}
         */
        NgxEchartsDirective.prototype.ngAfterViewInit = /**
         * @return {?}
         */
            function () {
                var _this = this;
                setTimeout(function () { return _this.initChart(); });
            };
        /**
         * @return {?}
         */
        NgxEchartsDirective.prototype.initChart = /**
         * @return {?}
         */
            function () {
                this.onOptionsChange(this.options);
                if (this.merge && this._chart) {
                    this.setOption(this.merge);
                }
            };
        /**
         * @param {?} opt
         * @return {?}
         */
        NgxEchartsDirective.prototype.onOptionsChange = /**
         * @param {?} opt
         * @return {?}
         */
            function (opt) {
                var _this = this;
                if (opt) {
                    if (!this._chart) {
                        this._chart = this.createChart();
                        // subscribe to _resize$ and debounced
                        this._resizeSub = this._resize$.pipe(operators.debounceTime(50)).subscribe(function () {
                            if (_this._chart) {
                                _this._chart.resize();
                            }
                        });
                        // output echart instance:
                        this.chartInit.emit(this._chart);
                        // register events:
                        if (this.detectEventChanges) {
                            this.registerEvents();
                        }
                    }
                    this._chart.setOption(this.options, true);
                }
            };
        /**
         * @return {?}
         */
        NgxEchartsDirective.prototype.registerEvents = /**
         * @return {?}
         */
            function () {
                if (this._chart) {
                    /** @type {?} */
                    var events = EChartEvents.All;
                    for (var i = 0, len = events.length; i < len; i++) {
                        this._chart.on(events[i], this.eventHandler, this);
                    }
                }
            };
        /**
         * @return {?}
         */
        NgxEchartsDirective.prototype.unregisterEvents = /**
         * @return {?}
         */
            function () {
                if (this._chart) {
                    /** @type {?} */
                    var events = EChartEvents.All;
                    for (var i = 0, len = events.length; i < len; i++) {
                        this._chart.off(events[i], this.eventHandler);
                    }
                }
            };
        /**
         * @return {?}
         */
        NgxEchartsDirective.prototype.clear = /**
         * @return {?}
         */
            function () {
                if (this._chart) {
                    this._chart.clear();
                }
            };
        /**
         * @param {?} loading
         * @return {?}
         */
        NgxEchartsDirective.prototype.toggleLoading = /**
         * @param {?} loading
         * @return {?}
         */
            function (loading) {
                if (this._chart) {
                    loading ? this._chart.showLoading(this.loadingType, this.loadingOpts) : this._chart.hideLoading();
                }
            };
        /**
         * @param {?} option
         * @param {?=} opts
         * @return {?}
         */
        NgxEchartsDirective.prototype.setOption = /**
         * @param {?} option
         * @param {?=} opts
         * @return {?}
         */
            function (option, opts) {
                if (this._chart) {
                    this._chart.setOption(option, opts);
                }
            };
        /**
         * @param {?} event
         * @return {?}
         */
        NgxEchartsDirective.prototype.eventHandler = /**
         * @param {?} event
         * @return {?}
         */
            function (event) {
                var _this = this;
                switch (event.type) {
                    case EChartEvents.Click:
                        this._ngZone.run(function () { return _this.chartClick.emit(event); });
                        break;
                    case EChartEvents.DblClick:
                        this._ngZone.run(function () { return _this.chartDblClick.emit(event); });
                        break;
                    case EChartEvents.MouseDown:
                        this._ngZone.run(function () { return _this.chartMouseDown.emit(event); });
                        break;
                    case EChartEvents.MouseUp:
                        this._ngZone.run(function () { return _this.chartMouseUp.emit(event); });
                        break;
                    case EChartEvents.MouseOver:
                        this._ngZone.run(function () { return _this.chartMouseOver.emit(event); });
                        break;
                    case EChartEvents.MouseOut:
                        this._ngZone.run(function () { return _this.chartMouseOut.emit(event); });
                        break;
                    case EChartEvents.GlobalOut:
                        this._ngZone.run(function () { return _this.chartGlobalOut.emit(event); });
                        break;
                    case EChartEvents.ContextMenu:
                        this._ngZone.run(function () { return _this.chartContextMenu.emit(event); });
                        break;
                    case EChartEvents.DataZoom:
                        this._ngZone.run(function () { return _this.chartDataZoom.emit(event); });
                        break;
                    case EChartEvents.MapSelectChanged:
                        this._ngZone.run(function () { return _this.chartMapSelectChanged.emit(event); });
                        break;
                    case EChartEvents.MapSelected:
                        this._ngZone.run(function () { return _this.chartMapSelected.emit(event); });
                        break;
                    case EChartEvents.MapUnselected:
                        this._ngZone.run(function () { return _this.chartMapUnselected.emit(event); });
                        break;
                }
            };
        /**
         * @param {?} detect
         * @return {?}
         */
        NgxEchartsDirective.prototype.toggleEventDetectors = /**
         * @param {?} detect
         * @return {?}
         */
            function (detect) {
                if (this._chart) {
                    detect ? this.registerEvents() : this.unregisterEvents();
                }
            };
        /**
         * @return {?}
         */
        NgxEchartsDirective.prototype.refreshChart = /**
         * @return {?}
         */
            function () {
                this.ngOnDestroy();
                this.initChart();
            };
        NgxEchartsDirective.decorators = [
            { type: core.Directive, args: [{
                        selector: 'echarts, [echarts]',
                    },] }
        ];
        /** @nocollapse */
        NgxEchartsDirective.ctorParameters = function () {
            return [
                { type: core.ElementRef },
                { type: core.NgZone }
            ];
        };
        NgxEchartsDirective.propDecorators = {
            options: [{ type: core.Input }],
            theme: [{ type: core.Input }],
            loading: [{ type: core.Input }],
            initOpts: [{ type: core.Input }],
            merge: [{ type: core.Input }],
            autoResize: [{ type: core.Input }],
            loadingType: [{ type: core.Input }],
            loadingOpts: [{ type: core.Input }],
            detectEventChanges: [{ type: core.Input }],
            chartInit: [{ type: core.Output }],
            chartClick: [{ type: core.Output }],
            chartDblClick: [{ type: core.Output }],
            chartMouseDown: [{ type: core.Output }],
            chartMouseUp: [{ type: core.Output }],
            chartMouseOver: [{ type: core.Output }],
            chartMouseOut: [{ type: core.Output }],
            chartGlobalOut: [{ type: core.Output }],
            chartContextMenu: [{ type: core.Output }],
            chartDataZoom: [{ type: core.Output }],
            chartMapSelectChanged: [{ type: core.Output }],
            chartMapSelected: [{ type: core.Output }],
            chartMapUnselected: [{ type: core.Output }],
            onWindowResize: [{ type: core.HostListener, args: ['window:resize', ['$event'],] }]
        };
        return NgxEchartsDirective;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var NgxEchartsModule = /** @class */ (function () {
        function NgxEchartsModule() {
        }
        NgxEchartsModule.decorators = [
            { type: core.NgModule, args: [{
                        imports: [],
                        declarations: [
                            NgxEchartsDirective
                        ],
                        exports: [
                            NgxEchartsDirective
                        ]
                    },] }
        ];
        return NgxEchartsModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */

    exports.NgxEchartsModule = NgxEchartsModule;
    exports.ɵa = NgxEchartsDirective;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,