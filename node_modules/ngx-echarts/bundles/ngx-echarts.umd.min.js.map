{"version":3,"sources":["ng://ngx-echarts/lib/change-filter.ts","ng://ngx-echarts/lib/echart-events.ts","ng://ngx-echarts/lib/ngx-echarts.directive.ts","ng://ngx-echarts/lib/ngx-echarts.module.ts"],"names":["ChangeFilter","_changes","this","of","changes","prototype","notEmpty","key","value","currentValue","undefined","empty","has","notFirst","isFirstChange","notFirstAndEmpty","EChartEvents","All","Click","DblClick","MouseDown","MouseUp","MouseOver","MouseOut","GlobalOut","ContextMenu","DataZoom","MapSelectChanged","MapSelected","MapUnselected","NgxEchartsDirective","el","_ngZone","autoResize","loadingType","detectEventChanges","chartInit","EventEmitter","chartClick","chartDblClick","chartMouseDown","chartMouseUp","chartMouseOver","chartMouseOut","chartGlobalOut","chartContextMenu","chartDataZoom","chartMapSelectChanged","chartMapSelected","chartMapUnselected","currentOffsetWidth","currentOffsetHeight","_resize$","Subject","createChart","_this","currentWindowWidth","window","innerWidth","nativeElement","offsetWidth","offsetHeight","dom","getComputedStyle","prop","getPropertyValue","style","height","runOutsideAngular","init","theme","initOpts","onWindowResize","event","target","next","ngOnChanges","filter","subscribe","opt","onOptionsChange","setOption","v","toggleLoading","toggleEventDetectors","refreshChart","ngOnDestroy","_resizeSub","unsubscribe","_chart","dispose","ngDoCheck","ngAfterViewInit","setTimeout","initChart","options","merge","pipe","debounceTime","resize","emit","registerEvents","events","i","len","length","on","eventHandler","unregisterEvents","off","clear","loading","showLoading","loadingOpts","hideLoading","option","opts","type","run","detect","Directive","args","selector","ElementRef","NgZone","Input","Output","HostListener","NgxEchartsModule","NgModule","imports","declarations","exports"],"mappings":"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","sourcesContent":["import { SimpleChanges } from '@angular/core';\r\nimport { Observable, of, empty } from 'rxjs';\r\n\r\nexport class ChangeFilter {\r\n  constructor(private _changes: SimpleChanges) { }\r\n\r\n  static of(changes: SimpleChanges) {\r\n    return new ChangeFilter(changes);\r\n  }\r\n\r\n  notEmpty<T>(key: string): Observable<T> {\r\n    if (this._changes[key]) {\r\n      const value: T = this._changes[key].currentValue;\r\n\r\n      if (value !== undefined && value !== null) {\r\n        return of(value);\r\n      }\r\n    }\r\n    return empty();\r\n  }\r\n\r\n  has<T>(key: string): Observable<T> {\r\n    if (this._changes[key]) {\r\n      const value: T = this._changes[key].currentValue;\r\n      return of(value);\r\n    }\r\n    return empty();\r\n  }\r\n\r\n  notFirst<T>(key: string): Observable<T> {\r\n    if (this._changes[key] && !this._changes[key].isFirstChange()) {\r\n      const value: T = this._changes[key].currentValue;\r\n      return of(value);\r\n    }\r\n    return empty();\r\n  }\r\n\r\n  notFirstAndEmpty<T>(key: string): Observable<T> {\r\n    if (this._changes[key] && !this._changes[key].isFirstChange()) {\r\n      const value: T = this._changes[key].currentValue;\r\n\r\n      if (value !== undefined && value !== null) {\r\n        return of(value);\r\n      }\r\n    }\r\n    return empty();\r\n  }\r\n}\r\n","export class EChartEvents {\r\n  static Click = 'click';\r\n  static DblClick = 'dblclick';\r\n  static MouseDown = 'mousedown';\r\n  static MouseUp = 'mouseup';\r\n  static MouseOver = 'mouseover';\r\n  static MouseOut = 'mouseout';\r\n  static GlobalOut = 'globalout';\r\n  static ContextMenu = 'contextmenu';\r\n  static DataZoom = 'datazoom';\r\n  static MapSelectChanged = 'mapselectchanged';\r\n  static MapSelected = 'mapselected';\r\n  static MapUnselected = 'mapunselected';\r\n\r\n  static All = [\r\n    EChartEvents.Click,\r\n    EChartEvents.DblClick,\r\n    EChartEvents.MouseDown,\r\n    EChartEvents.MouseUp,\r\n    EChartEvents.MouseOver,\r\n    EChartEvents.MouseOut,\r\n    EChartEvents.GlobalOut,\r\n    EChartEvents.ContextMenu,\r\n    EChartEvents.DataZoom,\r\n    EChartEvents.MapSelectChanged,\r\n    EChartEvents.MapSelected,\r\n    EChartEvents.MapUnselected,\r\n  ];\r\n}\r\n","import {\r\n  Directive, ElementRef, Renderer, Input, Output, HostListener, EventEmitter,\r\n  OnChanges, OnDestroy, SimpleChanges, NgZone, DoCheck, AfterViewInit\r\n} from '@angular/core';\r\nimport { ChangeFilter } from './change-filter';\r\nimport { Subject, Subscription } from 'rxjs';\r\nimport { debounceTime } from 'rxjs/operators';\r\nimport { init, ECharts, EChartOption } from 'echarts';\r\nimport { EChartEvents } from './echart-events';\r\n\r\n@Directive({\r\n  selector: 'echarts, [echarts]',\r\n})\r\nexport class NgxEchartsDirective implements OnChanges, OnDestroy, DoCheck, AfterViewInit {\r\n  @Input() options: EChartOption;\r\n  @Input() theme: string;\r\n  @Input() loading: boolean;\r\n  @Input() initOpts: {\r\n    devicePixelRatio?: number\r\n    renderer?: string\r\n    width?: number | string\r\n    height?: number | string\r\n  };\r\n  @Input() merge: EChartOption;\r\n  @Input() autoResize = true;\r\n  @Input() loadingType = 'default';\r\n  @Input() loadingOpts: object;\r\n\r\n  /**\r\n   * Whether to register event handlers on echartInstance. Default is true.\r\n   * Use it to avoid unwanted change detection, if you want to optimize the performance.\r\n   */\r\n  @Input() detectEventChanges = true;\r\n\r\n  // chart events:\r\n  @Output() chartInit = new EventEmitter<ECharts>();\r\n  @Output() chartClick = new EventEmitter<any>();\r\n  @Output() chartDblClick = new EventEmitter<any>();\r\n  @Output() chartMouseDown = new EventEmitter<any>();\r\n  @Output() chartMouseUp = new EventEmitter<any>();\r\n  @Output() chartMouseOver = new EventEmitter<any>();\r\n  @Output() chartMouseOut = new EventEmitter<any>();\r\n  @Output() chartGlobalOut = new EventEmitter<any>();\r\n  @Output() chartContextMenu = new EventEmitter<any>();\r\n  @Output() chartDataZoom = new EventEmitter<any>();\r\n  @Output() chartMapSelectChanged = new EventEmitter<any>();\r\n  @Output() chartMapSelected = new EventEmitter<any>();\r\n  @Output() chartMapUnselected = new EventEmitter<any>();\r\n\r\n  private _chart: ECharts;\r\n  private currentOffsetWidth = 0;\r\n  private currentOffsetHeight = 0;\r\n  private currentWindowWidth: number;\r\n  private _resize$ = new Subject<void>();\r\n  private _resizeSub: Subscription;\r\n\r\n  constructor(private el: ElementRef, private _ngZone: NgZone) { }\r\n\r\n  private createChart() {\r\n    this.currentWindowWidth = window.innerWidth;\r\n    this.currentOffsetWidth = this.el.nativeElement.offsetWidth;\r\n    this.currentOffsetHeight = this.el.nativeElement.offsetHeight;\r\n    const dom = this.el.nativeElement;\r\n\r\n    if (window && window.getComputedStyle) {\r\n      const prop = window.getComputedStyle(dom, null).getPropertyValue('height');\r\n      if ((!prop || prop === '0px') &&\r\n        (!dom.style.height || dom.style.height === '0px')) {\r\n        dom.style.height = '400px';\r\n      }\r\n    }\r\n\r\n    return this._ngZone.runOutsideAngular(() => init(dom, this.theme || undefined, this.initOpts || undefined));\r\n  }\r\n\r\n  @HostListener('window:resize', ['$event'])\r\n  onWindowResize(event: Event) {\r\n    const target = event.target as Window;\r\n\r\n    if (this.autoResize && target.innerWidth !== this.currentWindowWidth) {\r\n      this.currentWindowWidth = target.innerWidth;\r\n      this.currentOffsetWidth = this.el.nativeElement.offsetWidth;\r\n      this.currentOffsetHeight = this.el.nativeElement.offsetHeight;\r\n\r\n      this._resize$.next();\r\n    }\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges) {\r\n    const filter = ChangeFilter.of(changes);\r\n    filter.notFirstAndEmpty<any>('options').subscribe(opt => this.onOptionsChange(opt));\r\n    filter.notFirstAndEmpty<any>('merge').subscribe(opt => this.setOption(opt));\r\n    filter.has<boolean>('loading').subscribe(v => this.toggleLoading(!!v));\r\n    filter.notFirst<boolean>('detectEventChanges').subscribe(v => this.toggleEventDetectors(!!v));\r\n    filter.notFirst<string>('theme').subscribe(() => this.refreshChart());\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    if (this._resizeSub) {\r\n      this._resizeSub.unsubscribe();\r\n      this._resizeSub = null;\r\n    }\r\n\r\n    if (this._chart) {\r\n      this._chart.dispose();\r\n      this._chart = null;\r\n    }\r\n  }\r\n\r\n  ngDoCheck() {\r\n    // No heavy work in DoCheck!\r\n    if (this._chart && this.autoResize) {\r\n      const offsetWidth = this.el.nativeElement.offsetWidth;\r\n      const offsetHeight = this.el.nativeElement.offsetHeight;\r\n\r\n      if (this.currentOffsetWidth !== offsetWidth || this.currentOffsetHeight !== offsetHeight) {\r\n        this.currentOffsetWidth = offsetWidth;\r\n        this.currentOffsetHeight = offsetHeight;\r\n        this._resize$.next();\r\n      }\r\n    }\r\n  }\r\n\r\n  ngAfterViewInit() {\r\n    setTimeout(() => this.initChart());\r\n  }\r\n\r\n  private initChart() {\r\n    this.onOptionsChange(this.options);\r\n\r\n    if (this.merge && this._chart) {\r\n      this.setOption(this.merge);\r\n    }\r\n  }\r\n\r\n  private onOptionsChange(opt: EChartOption) {\r\n    if (opt) {\r\n      if (!this._chart) {\r\n        this._chart = this.createChart();\r\n\r\n        // subscribe to _resize$ and debounced\r\n        this._resizeSub = this._resize$.pipe(debounceTime(50)).subscribe(() => {\r\n          if (this._chart) {\r\n            this._chart.resize();\r\n          }\r\n        });\r\n\r\n        // output echart instance:\r\n        this.chartInit.emit(this._chart);\r\n\r\n        // register events:\r\n        if (this.detectEventChanges) {\r\n          this.registerEvents();\r\n        }\r\n      }\r\n\r\n      this._chart.setOption(this.options, true);\r\n    }\r\n  }\r\n\r\n  private registerEvents() {\r\n    if (this._chart) {\r\n      const events = EChartEvents.All;\r\n      for (let i = 0, len = events.length; i < len; i++) {\r\n        this._chart.on(events[i], this.eventHandler, this);\r\n      }\r\n    }\r\n  }\r\n\r\n  private unregisterEvents() {\r\n    if (this._chart) {\r\n      const events = EChartEvents.All;\r\n      for (let i = 0, len = events.length; i < len; i++) {\r\n        this._chart.off(events[i], this.eventHandler);\r\n      }\r\n    }\r\n  }\r\n\r\n  clear() {\r\n    if (this._chart) {\r\n      this._chart.clear();\r\n    }\r\n  }\r\n\r\n  toggleLoading(loading: boolean) {\r\n    if (this._chart) {\r\n      loading ? this._chart.showLoading(this.loadingType, this.loadingOpts) : this._chart.hideLoading();\r\n    }\r\n  }\r\n\r\n  setOption(option: any, opts?: any) {\r\n    if (this._chart) {\r\n      this._chart.setOption(option, opts);\r\n    }\r\n  }\r\n\r\n  private eventHandler(event) {\r\n    switch (event.type) {\r\n      case EChartEvents.Click:\r\n        this._ngZone.run(() => this.chartClick.emit(event));\r\n        break;\r\n      case EChartEvents.DblClick:\r\n        this._ngZone.run(() => this.chartDblClick.emit(event));\r\n        break;\r\n      case EChartEvents.MouseDown:\r\n        this._ngZone.run(() => this.chartMouseDown.emit(event));\r\n        break;\r\n      case EChartEvents.MouseUp:\r\n        this._ngZone.run(() => this.chartMouseUp.emit(event));\r\n        break;\r\n      case EChartEvents.MouseOver:\r\n        this._ngZone.run(() => this.chartMouseOver.emit(event));\r\n        break;\r\n      case EChartEvents.MouseOut:\r\n        this._ngZone.run(() => this.chartMouseOut.emit(event));\r\n        break;\r\n      case EChartEvents.GlobalOut:\r\n        this._ngZone.run(() => this.chartGlobalOut.emit(event));\r\n        break;\r\n      case EChartEvents.ContextMenu:\r\n        this._ngZone.run(() => this.chartContextMenu.emit(event));\r\n        break;\r\n      case EChartEvents.DataZoom:\r\n        this._ngZone.run(() => this.chartDataZoom.emit(event));\r\n        break;\r\n      case EChartEvents.MapSelectChanged:\r\n        this._ngZone.run(() => this.chartMapSelectChanged.emit(event));\r\n        break;\r\n      case EChartEvents.MapSelected:\r\n        this._ngZone.run(() => this.chartMapSelected.emit(event));\r\n        break;\r\n      case EChartEvents.MapUnselected:\r\n        this._ngZone.run(() => this.chartMapUnselected.emit(event));\r\n        break;\r\n    }\r\n  }\r\n\r\n  private toggleEventDetectors(detect: boolean) {\r\n    if (this._chart) {\r\n      detect ? this.registerEvents() : this.unregisterEvents();\r\n    }\r\n  }\r\n\r\n  private refreshChart() {\r\n    this.ngOnDestroy();\r\n    this.initChart();\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { NgxEchartsDirective } from './ngx-echarts.directive';\r\n\r\n@NgModule({\r\n  imports: [],\r\n  declarations: [\r\n    NgxEchartsDirective\r\n  ],\r\n  exports: [\r\n    NgxEchartsDirective\r\n  ]\r\n})\r\nexport class NgxEchartsModule { }\r\n"]}