import { ElementRef, EventEmitter, OnChanges, OnDestroy, SimpleChanges, NgZone, DoCheck, AfterViewInit } from '@angular/core';
import { EChartOption } from 'echarts';
export declare class NgxEchartsDirective implements OnChanges, OnDestroy, DoCheck, AfterViewInit {
    private el;
    private _ngZone;
    options: EChartOption;
    theme: string;
    loading: boolean;
    initOpts: {
        devicePixelRatio?: number;
        renderer?: string;
        width?: number | string;
        height?: number | string;
    };
    merge: EChartOption;
    autoResize: boolean;
    loadingType: string;
    loadingOpts: object;
    /**
     * Whether to register event handlers on echartInstance. Default is true.
     * Use it to avoid unwanted change detection, if you want to optimize the performance.
     */
    detectEventChanges: boolean;
    chartInit: EventEmitter<any>;
    chartClick: EventEmitter<any>;
    chartDblClick: EventEmitter<any>;
    chartMouseDown: EventEmitter<any>;
    chartMouseUp: EventEmitter<any>;
    chartMouseOver: EventEmitter<any>;
    chartMouseOut: EventEmitter<any>;
    chartGlobalOut: EventEmitter<any>;
    chartContextMenu: EventEmitter<any>;
    chartDataZoom: EventEmitter<any>;
    chartMapSelectChanged: EventEmitter<any>;
    chartMapSelected: EventEmitter<any>;
    chartMapUnselected: EventEmitter<any>;
    private _chart;
    private currentOffsetWidth;
    private currentOffsetHeight;
    private currentWindowWidth;
    private _resize$;
    private _resizeSub;
    constructor(el: ElementRef, _ngZone: NgZone);
    private createChart;
    onWindowResize(event: Event): void;
    ngOnChanges(changes: SimpleChanges): void;
    ngOnDestroy(): void;
    ngDoCheck(): void;
    ngAfterViewInit(): void;
    private initChart;
    private onOptionsChange;
    private registerEvents;
    private unregisterEvents;
    clear(): void;
    toggleLoading(loading: boolean): void;
    setOption(option: any, opts?: any): void;
    private eventHandler;
    private toggleEventDetectors;
    private refreshChart;
}
