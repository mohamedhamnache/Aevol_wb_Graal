import { of, empty, Subject } from 'rxjs';
import { Directive, ElementRef, Input, Output, HostListener, EventEmitter, NgZone, NgModule } from '@angular/core';
import { debounceTime } from 'rxjs/operators';
import { init } from 'echarts';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var ChangeFilter = /** @class */ (function () {
    function ChangeFilter(_changes) {
        this._changes = _changes;
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ChangeFilter.of = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        return new ChangeFilter(changes);
    };
    /**
     * @template T
     * @param {?} key
     * @return {?}
     */
    ChangeFilter.prototype.notEmpty = /**
     * @template T
     * @param {?} key
     * @return {?}
     */
    function (key) {
        if (this._changes[key]) {
            /** @type {?} */
            var value = this._changes[key].currentValue;
            if (value !== undefined && value !== null) {
                return of(value);
            }
        }
        return empty();
    };
    /**
     * @template T
     * @param {?} key
     * @return {?}
     */
    ChangeFilter.prototype.has = /**
     * @template T
     * @param {?} key
     * @return {?}
     */
    function (key) {
        if (this._changes[key]) {
            /** @type {?} */
            var value = this._changes[key].currentValue;
            return of(value);
        }
        return empty();
    };
    /**
     * @template T
     * @param {?} key
     * @return {?}
     */
    ChangeFilter.prototype.notFirst = /**
     * @template T
     * @param {?} key
     * @return {?}
     */
    function (key) {
        if (this._changes[key] && !this._changes[key].isFirstChange()) {
            /** @type {?} */
            var value = this._changes[key].currentValue;
            return of(value);
        }
        return empty();
    };
    /**
     * @template T
     * @param {?} key
     * @return {?}
     */
    ChangeFilter.prototype.notFirstAndEmpty = /**
     * @template T
     * @param {?} key
     * @return {?}
     */
    function (key) {
        if (this._changes[key] && !this._changes[key].isFirstChange()) {
            /** @type {?} */
            var value = this._changes[key].currentValue;
            if (value !== undefined && value !== null) {
                return of(value);
            }
        }
        return empty();
    };
    return ChangeFilter;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var EChartEvents = /** @class */ (function () {
    function EChartEvents() {
    }
    EChartEvents.Click = 'click';
    EChartEvents.DblClick = 'dblclick';
    EChartEvents.MouseDown = 'mousedown';
    EChartEvents.MouseUp = 'mouseup';
    EChartEvents.MouseOver = 'mouseover';
    EChartEvents.MouseOut = 'mouseout';
    EChartEvents.GlobalOut = 'globalout';
    EChartEvents.ContextMenu = 'contextmenu';
    EChartEvents.DataZoom = 'datazoom';
    EChartEvents.MapSelectChanged = 'mapselectchanged';
    EChartEvents.MapSelected = 'mapselected';
    EChartEvents.MapUnselected = 'mapunselected';
    EChartEvents.All = [
        EChartEvents.Click,
        EChartEvents.DblClick,
        EChartEvents.MouseDown,
        EChartEvents.MouseUp,
        EChartEvents.MouseOver,
        EChartEvents.MouseOut,
        EChartEvents.GlobalOut,
        EChartEvents.ContextMenu,
        EChartEvents.DataZoom,
        EChartEvents.MapSelectChanged,
        EChartEvents.MapSelected,
        EChartEvents.MapUnselected,
    ];
    return EChartEvents;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var NgxEchartsDirective = /** @class */ (function () {
    function NgxEchartsDirective(el, _ngZone) {
        this.el = el;
        this._ngZone = _ngZone;
        this.autoResize = true;
        this.loadingType = 'default';
        /**
         * Whether to register event handlers on echartInstance. Default is true.
         * Use it to avoid unwanted change detection, if you want to optimize the performance.
         */
        this.detectEventChanges = true;
        // chart events:
        this.chartInit = new EventEmitter();
        this.chartClick = new EventEmitter();
        this.chartDblClick = new EventEmitter();
        this.chartMouseDown = new EventEmitter();
        this.chartMouseUp = new EventEmitter();
        this.chartMouseOver = new EventEmitter();
        this.chartMouseOut = new EventEmitter();
        this.chartGlobalOut = new EventEmitter();
        this.chartContextMenu = new EventEmitter();
        this.chartDataZoom = new EventEmitter();
        this.chartMapSelectChanged = new EventEmitter();
        this.chartMapSelected = new EventEmitter();
        this.chartMapUnselected = new EventEmitter();
        this.currentOffsetWidth = 0;
        this.currentOffsetHeight = 0;
        this._resize$ = new Subject();
    }
    /**
     * @return {?}
     */
    NgxEchartsDirective.prototype.createChart = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.currentWindowWidth = window.innerWidth;
        this.currentOffsetWidth = this.el.nativeElement.offsetWidth;
        this.currentOffsetHeight = this.el.nativeElement.offsetHeight;
        /** @type {?} */
        var dom = this.el.nativeElement;
        if (window && window.getComputedStyle) {
            /** @type {?} */
            var prop = window.getComputedStyle(dom, null).getPropertyValue('height');
            if ((!prop || prop === '0px') &&
                (!dom.style.height || dom.style.height === '0px')) {
                dom.style.height = '400px';
            }
        }
        return this._ngZone.runOutsideAngular(function () { return init(dom, _this.theme || undefined, _this.initOpts || undefined); });
    };
    /**
     * @param {?} event
     * @return {?}
     */
    NgxEchartsDirective.prototype.onWindowResize = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        /** @type {?} */
        var target = (/** @type {?} */ (event.target));
        if (this.autoResize && target.innerWidth !== this.currentWindowWidth) {
            this.currentWindowWidth = target.innerWidth;
            this.currentOffsetWidth = this.el.nativeElement.offsetWidth;
            this.currentOffsetHeight = this.el.nativeElement.offsetHeight;
            this._resize$.next();
        }
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    NgxEchartsDirective.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        var _this = this;
        /** @type {?} */
        var filter = ChangeFilter.of(changes);
        filter.notFirstAndEmpty('options').subscribe(function (opt) { return _this.onOptionsChange(opt); });
        filter.notFirstAndEmpty('merge').subscribe(function (opt) { return _this.setOption(opt); });
        filter.has('loading').subscribe(function (v) { return _this.toggleLoading(!!v); });
        filter.notFirst('detectEventChanges').subscribe(function (v) { return _this.toggleEventDetectors(!!v); });
        filter.notFirst('theme').subscribe(function () { return _this.refreshChart(); });
    };
    /**
     * @return {?}
     */
    NgxEchartsDirective.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        if (this._resizeSub) {
            this._resizeSub.unsubscribe();
            this._resizeSub = null;
        }
        if (this._chart) {
            this._chart.dispose();
            this._chart = null;
        }
    };
    /**
     * @return {?}
     */
    NgxEchartsDirective.prototype.ngDoCheck = /**
     * @return {?}
     */
    function () {
        // No heavy work in DoCheck!
        if (this._chart && this.autoResize) {
            /** @type {?} */
            var offsetWidth = this.el.nativeElement.offsetWidth;
            /** @type {?} */
            var offsetHeight = this.el.nativeElement.offsetHeight;
            if (this.currentOffsetWidth !== offsetWidth || this.currentOffsetHeight !== offsetHeight) {
                this.currentOffsetWidth = offsetWidth;
                this.currentOffsetHeight = offsetHeight;
                this._resize$.next();
            }
        }
    };
    /**
     * @return {?}
     */
    NgxEchartsDirective.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        setTimeout(function () { return _this.initChart(); });
    };
    /**
     * @return {?}
     */
    NgxEchartsDirective.prototype.initChart = /**
     * @return {?}
     */
    function () {
        this.onOptionsChange(this.options);
        if (this.merge && this._chart) {
            this.setOption(this.merge);
        }
    };
    /**
     * @param {?} opt
     * @return {?}
     */
    NgxEchartsDirective.prototype.onOptionsChange = /**
     * @param {?} opt
     * @return {?}
     */
    function (opt) {
        var _this = this;
        if (opt) {
            if (!this._chart) {
                this._chart = this.createChart();
                // subscribe to _resize$ and debounced
                this._resizeSub = this._resize$.pipe(debounceTime(50)).subscribe(function () {
                    if (_this._chart) {
                        _this._chart.resize();
                    }
                });
                // output echart instance:
                this.chartInit.emit(this._chart);
                // register events:
                if (this.detectEventChanges) {
                    this.registerEvents();
                }
            }
            this._chart.setOption(this.options, true);
        }
    };
    /**
     * @return {?}
     */
    NgxEchartsDirective.prototype.registerEvents = /**
     * @return {?}
     */
    function () {
        if (this._chart) {
            /** @type {?} */
            var events = EChartEvents.All;
            for (var i = 0, len = events.length; i < len; i++) {
                this._chart.on(events[i], this.eventHandler, this);
            }
        }
    };
    /**
     * @return {?}
     */
    NgxEchartsDirective.prototype.unregisterEvents = /**
     * @return {?}
     */
    function () {
        if (this._chart) {
            /** @type {?} */
            var events = EChartEvents.All;
            for (var i = 0, len = events.length; i < len; i++) {
                this._chart.off(events[i], this.eventHandler);
            }
        }
    };
    /**
     * @return {?}
     */
    NgxEchartsDirective.prototype.clear = /**
     * @return {?}
     */
    function () {
        if (this._chart) {
            this._chart.clear();
        }
    };
    /**
     * @param {?} loading
     * @return {?}
     */
    NgxEchartsDirective.prototype.toggleLoading = /**
     * @param {?} loading
     * @return {?}
     */
    function (loading) {
        if (this._chart) {
            loading ? this._chart.showLoading(this.loadingType, this.loadingOpts) : this._chart.hideLoading();
        }
    };
    /**
     * @param {?} option
     * @param {?=} opts
     * @return {?}
     */
    NgxEchartsDirective.prototype.setOption = /**
     * @param {?} option
     * @param {?=} opts
     * @return {?}
     */
    function (option, opts) {
        if (this._chart) {
            this._chart.setOption(option, opts);
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    NgxEchartsDirective.prototype.eventHandler = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        var _this = this;
        switch (event.type) {
            case EChartEvents.Click:
                this._ngZone.run(function () { return _this.chartClick.emit(event); });
                break;
            case EChartEvents.DblClick:
                this._ngZone.run(function () { return _this.chartDblClick.emit(event); });
                break;
            case EChartEvents.MouseDown:
                this._ngZone.run(function () { return _this.chartMouseDown.emit(event); });
                break;
            case EChartEvents.MouseUp:
                this._ngZone.run(function () { return _this.chartMouseUp.emit(event); });
                break;
            case EChartEvents.MouseOver:
                this._ngZone.run(function () { return _this.chartMouseOver.emit(event); });
                break;
            case EChartEvents.MouseOut:
                this._ngZone.run(function () { return _this.chartMouseOut.emit(event); });
                break;
            case EChartEvents.GlobalOut:
                this._ngZone.run(function () { return _this.chartGlobalOut.emit(event); });
                break;
            case EChartEvents.ContextMenu:
                this._ngZone.run(function () { return _this.chartContextMenu.emit(event); });
                break;
            case EChartEvents.DataZoom:
                this._ngZone.run(function () { return _this.chartDataZoom.emit(event); });
                break;
            case EChartEvents.MapSelectChanged:
                this._ngZone.run(function () { return _this.chartMapSelectChanged.emit(event); });
                break;
            case EChartEvents.MapSelected:
                this._ngZone.run(function () { return _this.chartMapSelected.emit(event); });
                break;
            case EChartEvents.MapUnselected:
                this._ngZone.run(function () { return _this.chartMapUnselected.emit(event); });
                break;
        }
    };
    /**
     * @param {?} detect
     * @return {?}
     */
    NgxEchartsDirective.prototype.toggleEventDetectors = /**
     * @param {?} detect
     * @return {?}
     */
    function (detect) {
        if (this._chart) {
            detect ? this.registerEvents() : this.unregisterEvents();
        }
    };
    /**
     * @return {?}
     */
    NgxEchartsDirective.prototype.refreshChart = /**
     * @return {?}
     */
    function () {
        this.ngOnDestroy();
        this.initChart();
    };
    NgxEchartsDirective.decorators = [
        { type: Directive, args: [{
                    selector: 'echarts, [echarts]',
                },] }
    ];
    /** @nocollapse */
    NgxEchartsDirective.ctorParameters = function () { return [
        { type: ElementRef },
        { type: NgZone }
    ]; };
    NgxEchartsDirective.propDecorators = {
        options: [{ type: Input }],
        theme: [{ type: Input }],
        loading: [{ type: Input }],
        initOpts: [{ type: Input }],
        merge: [{ type: Input }],
        autoResize: [{ type: Input }],
        loadingType: [{ type: Input }],
        loadingOpts: [{ type: Input }],
        detectEventChanges: [{ type: Input }],
        chartInit: [{ type: Output }],
        chartClick: [{ type: Output }],
        chartDblClick: [{ type: Output }],
        chartMouseDown: [{ type: Output }],
        chartMouseUp: [{ type: Output }],
        chartMouseOver: [{ type: Output }],
        chartMouseOut: [{ type: Output }],
        chartGlobalOut: [{ type: Output }],
        chartContextMenu: [{ type: Output }],
        chartDataZoom: [{ type: Output }],
        chartMapSelectChanged: [{ type: Output }],
        chartMapSelected: [{ type: Output }],
        chartMapUnselected: [{ type: Output }],
        onWindowResize: [{ type: HostListener, args: ['window:resize', ['$event'],] }]
    };
    return NgxEchartsDirective;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var NgxEchartsModule = /** @class */ (function () {
    function NgxEchartsModule() {
    }
    NgxEchartsModule.decorators = [
        { type: NgModule, args: [{
                    imports: [],
                    declarations: [
                        NgxEchartsDirective
                    ],
                    exports: [
                        NgxEchartsDirective
                    ]
                },] }
    ];
    return NgxEchartsModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */

export { NgxEchartsModule, NgxEchartsDirective as ɵa };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LWVjaGFydHMuanMubWFwIiwic291cmNlcyI6WyJuZzovL25neC1lY2hhcnRzL2xpYi9jaGFuZ2UtZmlsdGVyLnRzIiwibmc6Ly9uZ3gtZWNoYXJ0cy9saWIvZWNoYXJ0LWV2ZW50cy50cyIsIm5nOi8vbmd4LWVjaGFydHMvbGliL25neC1lY2hhcnRzLmRpcmVjdGl2ZS50cyIsIm5nOi8vbmd4LWVjaGFydHMvbGliL25neC1lY2hhcnRzLm1vZHVsZS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBTaW1wbGVDaGFuZ2VzIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IE9ic2VydmFibGUsIG9mLCBlbXB0eSB9IGZyb20gJ3J4anMnO1xyXG5cclxuZXhwb3J0IGNsYXNzIENoYW5nZUZpbHRlciB7XHJcbiAgY29uc3RydWN0b3IocHJpdmF0ZSBfY2hhbmdlczogU2ltcGxlQ2hhbmdlcykgeyB9XHJcblxyXG4gIHN0YXRpYyBvZihjaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzKSB7XHJcbiAgICByZXR1cm4gbmV3IENoYW5nZUZpbHRlcihjaGFuZ2VzKTtcclxuICB9XHJcblxyXG4gIG5vdEVtcHR5PFQ+KGtleTogc3RyaW5nKTogT2JzZXJ2YWJsZTxUPiB7XHJcbiAgICBpZiAodGhpcy5fY2hhbmdlc1trZXldKSB7XHJcbiAgICAgIGNvbnN0IHZhbHVlOiBUID0gdGhpcy5fY2hhbmdlc1trZXldLmN1cnJlbnRWYWx1ZTtcclxuXHJcbiAgICAgIGlmICh2YWx1ZSAhPT0gdW5kZWZpbmVkICYmIHZhbHVlICE9PSBudWxsKSB7XHJcbiAgICAgICAgcmV0dXJuIG9mKHZhbHVlKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIGVtcHR5KCk7XHJcbiAgfVxyXG5cclxuICBoYXM8VD4oa2V5OiBzdHJpbmcpOiBPYnNlcnZhYmxlPFQ+IHtcclxuICAgIGlmICh0aGlzLl9jaGFuZ2VzW2tleV0pIHtcclxuICAgICAgY29uc3QgdmFsdWU6IFQgPSB0aGlzLl9jaGFuZ2VzW2tleV0uY3VycmVudFZhbHVlO1xyXG4gICAgICByZXR1cm4gb2YodmFsdWUpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGVtcHR5KCk7XHJcbiAgfVxyXG5cclxuICBub3RGaXJzdDxUPihrZXk6IHN0cmluZyk6IE9ic2VydmFibGU8VD4ge1xyXG4gICAgaWYgKHRoaXMuX2NoYW5nZXNba2V5XSAmJiAhdGhpcy5fY2hhbmdlc1trZXldLmlzRmlyc3RDaGFuZ2UoKSkge1xyXG4gICAgICBjb25zdCB2YWx1ZTogVCA9IHRoaXMuX2NoYW5nZXNba2V5XS5jdXJyZW50VmFsdWU7XHJcbiAgICAgIHJldHVybiBvZih2YWx1ZSk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gZW1wdHkoKTtcclxuICB9XHJcblxyXG4gIG5vdEZpcnN0QW5kRW1wdHk8VD4oa2V5OiBzdHJpbmcpOiBPYnNlcnZhYmxlPFQ+IHtcclxuICAgIGlmICh0aGlzLl9jaGFuZ2VzW2tleV0gJiYgIXRoaXMuX2NoYW5nZXNba2V5XS5pc0ZpcnN0Q2hhbmdlKCkpIHtcclxuICAgICAgY29uc3QgdmFsdWU6IFQgPSB0aGlzLl9jaGFuZ2VzW2tleV0uY3VycmVudFZhbHVlO1xyXG5cclxuICAgICAgaWYgKHZhbHVlICE9PSB1bmRlZmluZWQgJiYgdmFsdWUgIT09IG51bGwpIHtcclxuICAgICAgICByZXR1cm4gb2YodmFsdWUpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gZW1wdHkoKTtcclxuICB9XHJcbn1cclxuIiwiZXhwb3J0IGNsYXNzIEVDaGFydEV2ZW50cyB7XHJcbiAgc3RhdGljIENsaWNrID0gJ2NsaWNrJztcclxuICBzdGF0aWMgRGJsQ2xpY2sgPSAnZGJsY2xpY2snO1xyXG4gIHN0YXRpYyBNb3VzZURvd24gPSAnbW91c2Vkb3duJztcclxuICBzdGF0aWMgTW91c2VVcCA9ICdtb3VzZXVwJztcclxuICBzdGF0aWMgTW91c2VPdmVyID0gJ21vdXNlb3Zlcic7XHJcbiAgc3RhdGljIE1vdXNlT3V0ID0gJ21vdXNlb3V0JztcclxuICBzdGF0aWMgR2xvYmFsT3V0ID0gJ2dsb2JhbG91dCc7XHJcbiAgc3RhdGljIENvbnRleHRNZW51ID0gJ2NvbnRleHRtZW51JztcclxuICBzdGF0aWMgRGF0YVpvb20gPSAnZGF0YXpvb20nO1xyXG4gIHN0YXRpYyBNYXBTZWxlY3RDaGFuZ2VkID0gJ21hcHNlbGVjdGNoYW5nZWQnO1xyXG4gIHN0YXRpYyBNYXBTZWxlY3RlZCA9ICdtYXBzZWxlY3RlZCc7XHJcbiAgc3RhdGljIE1hcFVuc2VsZWN0ZWQgPSAnbWFwdW5zZWxlY3RlZCc7XHJcblxyXG4gIHN0YXRpYyBBbGwgPSBbXHJcbiAgICBFQ2hhcnRFdmVudHMuQ2xpY2ssXHJcbiAgICBFQ2hhcnRFdmVudHMuRGJsQ2xpY2ssXHJcbiAgICBFQ2hhcnRFdmVudHMuTW91c2VEb3duLFxyXG4gICAgRUNoYXJ0RXZlbnRzLk1vdXNlVXAsXHJcbiAgICBFQ2hhcnRFdmVudHMuTW91c2VPdmVyLFxyXG4gICAgRUNoYXJ0RXZlbnRzLk1vdXNlT3V0LFxyXG4gICAgRUNoYXJ0RXZlbnRzLkdsb2JhbE91dCxcclxuICAgIEVDaGFydEV2ZW50cy5Db250ZXh0TWVudSxcclxuICAgIEVDaGFydEV2ZW50cy5EYXRhWm9vbSxcclxuICAgIEVDaGFydEV2ZW50cy5NYXBTZWxlY3RDaGFuZ2VkLFxyXG4gICAgRUNoYXJ0RXZlbnRzLk1hcFNlbGVjdGVkLFxyXG4gICAgRUNoYXJ0RXZlbnRzLk1hcFVuc2VsZWN0ZWQsXHJcbiAgXTtcclxufVxyXG4iLCJpbXBvcnQge1xyXG4gIERpcmVjdGl2ZSwgRWxlbWVudFJlZiwgUmVuZGVyZXIsIElucHV0LCBPdXRwdXQsIEhvc3RMaXN0ZW5lciwgRXZlbnRFbWl0dGVyLFxyXG4gIE9uQ2hhbmdlcywgT25EZXN0cm95LCBTaW1wbGVDaGFuZ2VzLCBOZ1pvbmUsIERvQ2hlY2ssIEFmdGVyVmlld0luaXRcclxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgQ2hhbmdlRmlsdGVyIH0gZnJvbSAnLi9jaGFuZ2UtZmlsdGVyJztcclxuaW1wb3J0IHsgU3ViamVjdCwgU3Vic2NyaXB0aW9uIH0gZnJvbSAncnhqcyc7XHJcbmltcG9ydCB7IGRlYm91bmNlVGltZSB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcclxuaW1wb3J0IHsgaW5pdCwgRUNoYXJ0cywgRUNoYXJ0T3B0aW9uIH0gZnJvbSAnZWNoYXJ0cyc7XHJcbmltcG9ydCB7IEVDaGFydEV2ZW50cyB9IGZyb20gJy4vZWNoYXJ0LWV2ZW50cyc7XHJcblxyXG5ARGlyZWN0aXZlKHtcclxuICBzZWxlY3RvcjogJ2VjaGFydHMsIFtlY2hhcnRzXScsXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBOZ3hFY2hhcnRzRGlyZWN0aXZlIGltcGxlbWVudHMgT25DaGFuZ2VzLCBPbkRlc3Ryb3ksIERvQ2hlY2ssIEFmdGVyVmlld0luaXQge1xyXG4gIEBJbnB1dCgpIG9wdGlvbnM6IEVDaGFydE9wdGlvbjtcclxuICBASW5wdXQoKSB0aGVtZTogc3RyaW5nO1xyXG4gIEBJbnB1dCgpIGxvYWRpbmc6IGJvb2xlYW47XHJcbiAgQElucHV0KCkgaW5pdE9wdHM6IHtcclxuICAgIGRldmljZVBpeGVsUmF0aW8/OiBudW1iZXJcclxuICAgIHJlbmRlcmVyPzogc3RyaW5nXHJcbiAgICB3aWR0aD86IG51bWJlciB8IHN0cmluZ1xyXG4gICAgaGVpZ2h0PzogbnVtYmVyIHwgc3RyaW5nXHJcbiAgfTtcclxuICBASW5wdXQoKSBtZXJnZTogRUNoYXJ0T3B0aW9uO1xyXG4gIEBJbnB1dCgpIGF1dG9SZXNpemUgPSB0cnVlO1xyXG4gIEBJbnB1dCgpIGxvYWRpbmdUeXBlID0gJ2RlZmF1bHQnO1xyXG4gIEBJbnB1dCgpIGxvYWRpbmdPcHRzOiBvYmplY3Q7XHJcblxyXG4gIC8qKlxyXG4gICAqIFdoZXRoZXIgdG8gcmVnaXN0ZXIgZXZlbnQgaGFuZGxlcnMgb24gZWNoYXJ0SW5zdGFuY2UuIERlZmF1bHQgaXMgdHJ1ZS5cclxuICAgKiBVc2UgaXQgdG8gYXZvaWQgdW53YW50ZWQgY2hhbmdlIGRldGVjdGlvbiwgaWYgeW91IHdhbnQgdG8gb3B0aW1pemUgdGhlIHBlcmZvcm1hbmNlLlxyXG4gICAqL1xyXG4gIEBJbnB1dCgpIGRldGVjdEV2ZW50Q2hhbmdlcyA9IHRydWU7XHJcblxyXG4gIC8vIGNoYXJ0IGV2ZW50czpcclxuICBAT3V0cHV0KCkgY2hhcnRJbml0ID0gbmV3IEV2ZW50RW1pdHRlcjxFQ2hhcnRzPigpO1xyXG4gIEBPdXRwdXQoKSBjaGFydENsaWNrID0gbmV3IEV2ZW50RW1pdHRlcjxhbnk+KCk7XHJcbiAgQE91dHB1dCgpIGNoYXJ0RGJsQ2xpY2sgPSBuZXcgRXZlbnRFbWl0dGVyPGFueT4oKTtcclxuICBAT3V0cHV0KCkgY2hhcnRNb3VzZURvd24gPSBuZXcgRXZlbnRFbWl0dGVyPGFueT4oKTtcclxuICBAT3V0cHV0KCkgY2hhcnRNb3VzZVVwID0gbmV3IEV2ZW50RW1pdHRlcjxhbnk+KCk7XHJcbiAgQE91dHB1dCgpIGNoYXJ0TW91c2VPdmVyID0gbmV3IEV2ZW50RW1pdHRlcjxhbnk+KCk7XHJcbiAgQE91dHB1dCgpIGNoYXJ0TW91c2VPdXQgPSBuZXcgRXZlbnRFbWl0dGVyPGFueT4oKTtcclxuICBAT3V0cHV0KCkgY2hhcnRHbG9iYWxPdXQgPSBuZXcgRXZlbnRFbWl0dGVyPGFueT4oKTtcclxuICBAT3V0cHV0KCkgY2hhcnRDb250ZXh0TWVudSA9IG5ldyBFdmVudEVtaXR0ZXI8YW55PigpO1xyXG4gIEBPdXRwdXQoKSBjaGFydERhdGFab29tID0gbmV3IEV2ZW50RW1pdHRlcjxhbnk+KCk7XHJcbiAgQE91dHB1dCgpIGNoYXJ0TWFwU2VsZWN0Q2hhbmdlZCA9IG5ldyBFdmVudEVtaXR0ZXI8YW55PigpO1xyXG4gIEBPdXRwdXQoKSBjaGFydE1hcFNlbGVjdGVkID0gbmV3IEV2ZW50RW1pdHRlcjxhbnk+KCk7XHJcbiAgQE91dHB1dCgpIGNoYXJ0TWFwVW5zZWxlY3RlZCA9IG5ldyBFdmVudEVtaXR0ZXI8YW55PigpO1xyXG5cclxuICBwcml2YXRlIF9jaGFydDogRUNoYXJ0cztcclxuICBwcml2YXRlIGN1cnJlbnRPZmZzZXRXaWR0aCA9IDA7XHJcbiAgcHJpdmF0ZSBjdXJyZW50T2Zmc2V0SGVpZ2h0ID0gMDtcclxuICBwcml2YXRlIGN1cnJlbnRXaW5kb3dXaWR0aDogbnVtYmVyO1xyXG4gIHByaXZhdGUgX3Jlc2l6ZSQgPSBuZXcgU3ViamVjdDx2b2lkPigpO1xyXG4gIHByaXZhdGUgX3Jlc2l6ZVN1YjogU3Vic2NyaXB0aW9uO1xyXG5cclxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGVsOiBFbGVtZW50UmVmLCBwcml2YXRlIF9uZ1pvbmU6IE5nWm9uZSkgeyB9XHJcblxyXG4gIHByaXZhdGUgY3JlYXRlQ2hhcnQoKSB7XHJcbiAgICB0aGlzLmN1cnJlbnRXaW5kb3dXaWR0aCA9IHdpbmRvdy5pbm5lcldpZHRoO1xyXG4gICAgdGhpcy5jdXJyZW50T2Zmc2V0V2lkdGggPSB0aGlzLmVsLm5hdGl2ZUVsZW1lbnQub2Zmc2V0V2lkdGg7XHJcbiAgICB0aGlzLmN1cnJlbnRPZmZzZXRIZWlnaHQgPSB0aGlzLmVsLm5hdGl2ZUVsZW1lbnQub2Zmc2V0SGVpZ2h0O1xyXG4gICAgY29uc3QgZG9tID0gdGhpcy5lbC5uYXRpdmVFbGVtZW50O1xyXG5cclxuICAgIGlmICh3aW5kb3cgJiYgd2luZG93LmdldENvbXB1dGVkU3R5bGUpIHtcclxuICAgICAgY29uc3QgcHJvcCA9IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKGRvbSwgbnVsbCkuZ2V0UHJvcGVydHlWYWx1ZSgnaGVpZ2h0Jyk7XHJcbiAgICAgIGlmICgoIXByb3AgfHwgcHJvcCA9PT0gJzBweCcpICYmXHJcbiAgICAgICAgKCFkb20uc3R5bGUuaGVpZ2h0IHx8IGRvbS5zdHlsZS5oZWlnaHQgPT09ICcwcHgnKSkge1xyXG4gICAgICAgIGRvbS5zdHlsZS5oZWlnaHQgPSAnNDAwcHgnO1xyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHRoaXMuX25nWm9uZS5ydW5PdXRzaWRlQW5ndWxhcigoKSA9PiBpbml0KGRvbSwgdGhpcy50aGVtZSB8fCB1bmRlZmluZWQsIHRoaXMuaW5pdE9wdHMgfHwgdW5kZWZpbmVkKSk7XHJcbiAgfVxyXG5cclxuICBASG9zdExpc3RlbmVyKCd3aW5kb3c6cmVzaXplJywgWyckZXZlbnQnXSlcclxuICBvbldpbmRvd1Jlc2l6ZShldmVudDogRXZlbnQpIHtcclxuICAgIGNvbnN0IHRhcmdldCA9IGV2ZW50LnRhcmdldCBhcyBXaW5kb3c7XHJcblxyXG4gICAgaWYgKHRoaXMuYXV0b1Jlc2l6ZSAmJiB0YXJnZXQuaW5uZXJXaWR0aCAhPT0gdGhpcy5jdXJyZW50V2luZG93V2lkdGgpIHtcclxuICAgICAgdGhpcy5jdXJyZW50V2luZG93V2lkdGggPSB0YXJnZXQuaW5uZXJXaWR0aDtcclxuICAgICAgdGhpcy5jdXJyZW50T2Zmc2V0V2lkdGggPSB0aGlzLmVsLm5hdGl2ZUVsZW1lbnQub2Zmc2V0V2lkdGg7XHJcbiAgICAgIHRoaXMuY3VycmVudE9mZnNldEhlaWdodCA9IHRoaXMuZWwubmF0aXZlRWxlbWVudC5vZmZzZXRIZWlnaHQ7XHJcblxyXG4gICAgICB0aGlzLl9yZXNpemUkLm5leHQoKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIG5nT25DaGFuZ2VzKGNoYW5nZXM6IFNpbXBsZUNoYW5nZXMpIHtcclxuICAgIGNvbnN0IGZpbHRlciA9IENoYW5nZUZpbHRlci5vZihjaGFuZ2VzKTtcclxuICAgIGZpbHRlci5ub3RGaXJzdEFuZEVtcHR5PGFueT4oJ29wdGlvbnMnKS5zdWJzY3JpYmUob3B0ID0+IHRoaXMub25PcHRpb25zQ2hhbmdlKG9wdCkpO1xyXG4gICAgZmlsdGVyLm5vdEZpcnN0QW5kRW1wdHk8YW55PignbWVyZ2UnKS5zdWJzY3JpYmUob3B0ID0+IHRoaXMuc2V0T3B0aW9uKG9wdCkpO1xyXG4gICAgZmlsdGVyLmhhczxib29sZWFuPignbG9hZGluZycpLnN1YnNjcmliZSh2ID0+IHRoaXMudG9nZ2xlTG9hZGluZyghIXYpKTtcclxuICAgIGZpbHRlci5ub3RGaXJzdDxib29sZWFuPignZGV0ZWN0RXZlbnRDaGFuZ2VzJykuc3Vic2NyaWJlKHYgPT4gdGhpcy50b2dnbGVFdmVudERldGVjdG9ycyghIXYpKTtcclxuICAgIGZpbHRlci5ub3RGaXJzdDxzdHJpbmc+KCd0aGVtZScpLnN1YnNjcmliZSgoKSA9PiB0aGlzLnJlZnJlc2hDaGFydCgpKTtcclxuICB9XHJcblxyXG4gIG5nT25EZXN0cm95KCkge1xyXG4gICAgaWYgKHRoaXMuX3Jlc2l6ZVN1Yikge1xyXG4gICAgICB0aGlzLl9yZXNpemVTdWIudW5zdWJzY3JpYmUoKTtcclxuICAgICAgdGhpcy5fcmVzaXplU3ViID0gbnVsbDtcclxuICAgIH1cclxuXHJcbiAgICBpZiAodGhpcy5fY2hhcnQpIHtcclxuICAgICAgdGhpcy5fY2hhcnQuZGlzcG9zZSgpO1xyXG4gICAgICB0aGlzLl9jaGFydCA9IG51bGw7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBuZ0RvQ2hlY2soKSB7XHJcbiAgICAvLyBObyBoZWF2eSB3b3JrIGluIERvQ2hlY2shXHJcbiAgICBpZiAodGhpcy5fY2hhcnQgJiYgdGhpcy5hdXRvUmVzaXplKSB7XHJcbiAgICAgIGNvbnN0IG9mZnNldFdpZHRoID0gdGhpcy5lbC5uYXRpdmVFbGVtZW50Lm9mZnNldFdpZHRoO1xyXG4gICAgICBjb25zdCBvZmZzZXRIZWlnaHQgPSB0aGlzLmVsLm5hdGl2ZUVsZW1lbnQub2Zmc2V0SGVpZ2h0O1xyXG5cclxuICAgICAgaWYgKHRoaXMuY3VycmVudE9mZnNldFdpZHRoICE9PSBvZmZzZXRXaWR0aCB8fCB0aGlzLmN1cnJlbnRPZmZzZXRIZWlnaHQgIT09IG9mZnNldEhlaWdodCkge1xyXG4gICAgICAgIHRoaXMuY3VycmVudE9mZnNldFdpZHRoID0gb2Zmc2V0V2lkdGg7XHJcbiAgICAgICAgdGhpcy5jdXJyZW50T2Zmc2V0SGVpZ2h0ID0gb2Zmc2V0SGVpZ2h0O1xyXG4gICAgICAgIHRoaXMuX3Jlc2l6ZSQubmV4dCgpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBuZ0FmdGVyVmlld0luaXQoKSB7XHJcbiAgICBzZXRUaW1lb3V0KCgpID0+IHRoaXMuaW5pdENoYXJ0KCkpO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBpbml0Q2hhcnQoKSB7XHJcbiAgICB0aGlzLm9uT3B0aW9uc0NoYW5nZSh0aGlzLm9wdGlvbnMpO1xyXG5cclxuICAgIGlmICh0aGlzLm1lcmdlICYmIHRoaXMuX2NoYXJ0KSB7XHJcbiAgICAgIHRoaXMuc2V0T3B0aW9uKHRoaXMubWVyZ2UpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBvbk9wdGlvbnNDaGFuZ2Uob3B0OiBFQ2hhcnRPcHRpb24pIHtcclxuICAgIGlmIChvcHQpIHtcclxuICAgICAgaWYgKCF0aGlzLl9jaGFydCkge1xyXG4gICAgICAgIHRoaXMuX2NoYXJ0ID0gdGhpcy5jcmVhdGVDaGFydCgpO1xyXG5cclxuICAgICAgICAvLyBzdWJzY3JpYmUgdG8gX3Jlc2l6ZSQgYW5kIGRlYm91bmNlZFxyXG4gICAgICAgIHRoaXMuX3Jlc2l6ZVN1YiA9IHRoaXMuX3Jlc2l6ZSQucGlwZShkZWJvdW5jZVRpbWUoNTApKS5zdWJzY3JpYmUoKCkgPT4ge1xyXG4gICAgICAgICAgaWYgKHRoaXMuX2NoYXJ0KSB7XHJcbiAgICAgICAgICAgIHRoaXMuX2NoYXJ0LnJlc2l6ZSgpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICAvLyBvdXRwdXQgZWNoYXJ0IGluc3RhbmNlOlxyXG4gICAgICAgIHRoaXMuY2hhcnRJbml0LmVtaXQodGhpcy5fY2hhcnQpO1xyXG5cclxuICAgICAgICAvLyByZWdpc3RlciBldmVudHM6XHJcbiAgICAgICAgaWYgKHRoaXMuZGV0ZWN0RXZlbnRDaGFuZ2VzKSB7XHJcbiAgICAgICAgICB0aGlzLnJlZ2lzdGVyRXZlbnRzKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcblxyXG4gICAgICB0aGlzLl9jaGFydC5zZXRPcHRpb24odGhpcy5vcHRpb25zLCB0cnVlKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHByaXZhdGUgcmVnaXN0ZXJFdmVudHMoKSB7XHJcbiAgICBpZiAodGhpcy5fY2hhcnQpIHtcclxuICAgICAgY29uc3QgZXZlbnRzID0gRUNoYXJ0RXZlbnRzLkFsbDtcclxuICAgICAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IGV2ZW50cy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xyXG4gICAgICAgIHRoaXMuX2NoYXJ0Lm9uKGV2ZW50c1tpXSwgdGhpcy5ldmVudEhhbmRsZXIsIHRoaXMpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIHVucmVnaXN0ZXJFdmVudHMoKSB7XHJcbiAgICBpZiAodGhpcy5fY2hhcnQpIHtcclxuICAgICAgY29uc3QgZXZlbnRzID0gRUNoYXJ0RXZlbnRzLkFsbDtcclxuICAgICAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IGV2ZW50cy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xyXG4gICAgICAgIHRoaXMuX2NoYXJ0Lm9mZihldmVudHNbaV0sIHRoaXMuZXZlbnRIYW5kbGVyKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgY2xlYXIoKSB7XHJcbiAgICBpZiAodGhpcy5fY2hhcnQpIHtcclxuICAgICAgdGhpcy5fY2hhcnQuY2xlYXIoKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHRvZ2dsZUxvYWRpbmcobG9hZGluZzogYm9vbGVhbikge1xyXG4gICAgaWYgKHRoaXMuX2NoYXJ0KSB7XHJcbiAgICAgIGxvYWRpbmcgPyB0aGlzLl9jaGFydC5zaG93TG9hZGluZyh0aGlzLmxvYWRpbmdUeXBlLCB0aGlzLmxvYWRpbmdPcHRzKSA6IHRoaXMuX2NoYXJ0LmhpZGVMb2FkaW5nKCk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBzZXRPcHRpb24ob3B0aW9uOiBhbnksIG9wdHM/OiBhbnkpIHtcclxuICAgIGlmICh0aGlzLl9jaGFydCkge1xyXG4gICAgICB0aGlzLl9jaGFydC5zZXRPcHRpb24ob3B0aW9uLCBvcHRzKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHByaXZhdGUgZXZlbnRIYW5kbGVyKGV2ZW50KSB7XHJcbiAgICBzd2l0Y2ggKGV2ZW50LnR5cGUpIHtcclxuICAgICAgY2FzZSBFQ2hhcnRFdmVudHMuQ2xpY2s6XHJcbiAgICAgICAgdGhpcy5fbmdab25lLnJ1bigoKSA9PiB0aGlzLmNoYXJ0Q2xpY2suZW1pdChldmVudCkpO1xyXG4gICAgICAgIGJyZWFrO1xyXG4gICAgICBjYXNlIEVDaGFydEV2ZW50cy5EYmxDbGljazpcclxuICAgICAgICB0aGlzLl9uZ1pvbmUucnVuKCgpID0+IHRoaXMuY2hhcnREYmxDbGljay5lbWl0KGV2ZW50KSk7XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICAgIGNhc2UgRUNoYXJ0RXZlbnRzLk1vdXNlRG93bjpcclxuICAgICAgICB0aGlzLl9uZ1pvbmUucnVuKCgpID0+IHRoaXMuY2hhcnRNb3VzZURvd24uZW1pdChldmVudCkpO1xyXG4gICAgICAgIGJyZWFrO1xyXG4gICAgICBjYXNlIEVDaGFydEV2ZW50cy5Nb3VzZVVwOlxyXG4gICAgICAgIHRoaXMuX25nWm9uZS5ydW4oKCkgPT4gdGhpcy5jaGFydE1vdXNlVXAuZW1pdChldmVudCkpO1xyXG4gICAgICAgIGJyZWFrO1xyXG4gICAgICBjYXNlIEVDaGFydEV2ZW50cy5Nb3VzZU92ZXI6XHJcbiAgICAgICAgdGhpcy5fbmdab25lLnJ1bigoKSA9PiB0aGlzLmNoYXJ0TW91c2VPdmVyLmVtaXQoZXZlbnQpKTtcclxuICAgICAgICBicmVhaztcclxuICAgICAgY2FzZSBFQ2hhcnRFdmVudHMuTW91c2VPdXQ6XHJcbiAgICAgICAgdGhpcy5fbmdab25lLnJ1bigoKSA9PiB0aGlzLmNoYXJ0TW91c2VPdXQuZW1pdChldmVudCkpO1xyXG4gICAgICAgIGJyZWFrO1xyXG4gICAgICBjYXNlIEVDaGFydEV2ZW50cy5HbG9iYWxPdXQ6XHJcbiAgICAgICAgdGhpcy5fbmdab25lLnJ1bigoKSA9PiB0aGlzLmNoYXJ0R2xvYmFsT3V0LmVtaXQoZXZlbnQpKTtcclxuICAgICAgICBicmVhaztcclxuICAgICAgY2FzZSBFQ2hhcnRFdmVudHMuQ29udGV4dE1lbnU6XHJcbiAgICAgICAgdGhpcy5fbmdab25lLnJ1bigoKSA9PiB0aGlzLmNoYXJ0Q29udGV4dE1lbnUuZW1pdChldmVudCkpO1xyXG4gICAgICAgIGJyZWFrO1xyXG4gICAgICBjYXNlIEVDaGFydEV2ZW50cy5EYXRhWm9vbTpcclxuICAgICAgICB0aGlzLl9uZ1pvbmUucnVuKCgpID0+IHRoaXMuY2hhcnREYXRhWm9vbS5lbWl0KGV2ZW50KSk7XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICAgIGNhc2UgRUNoYXJ0RXZlbnRzLk1hcFNlbGVjdENoYW5nZWQ6XHJcbiAgICAgICAgdGhpcy5fbmdab25lLnJ1bigoKSA9PiB0aGlzLmNoYXJ0TWFwU2VsZWN0Q2hhbmdlZC5lbWl0KGV2ZW50KSk7XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICAgIGNhc2UgRUNoYXJ0RXZlbnRzLk1hcFNlbGVjdGVkOlxyXG4gICAgICAgIHRoaXMuX25nWm9uZS5ydW4oKCkgPT4gdGhpcy5jaGFydE1hcFNlbGVjdGVkLmVtaXQoZXZlbnQpKTtcclxuICAgICAgICBicmVhaztcclxuICAgICAgY2FzZSBFQ2hhcnRFdmVudHMuTWFwVW5zZWxlY3RlZDpcclxuICAgICAgICB0aGlzLl9uZ1pvbmUucnVuKCgpID0+IHRoaXMuY2hhcnRNYXBVbnNlbGVjdGVkLmVtaXQoZXZlbnQpKTtcclxuICAgICAgICBicmVhaztcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHByaXZhdGUgdG9nZ2xlRXZlbnREZXRlY3RvcnMoZGV0ZWN0OiBib29sZWFuKSB7XHJcbiAgICBpZiAodGhpcy5fY2hhcnQpIHtcclxuICAgICAgZGV0ZWN0ID8gdGhpcy5yZWdpc3RlckV2ZW50cygpIDogdGhpcy51bnJlZ2lzdGVyRXZlbnRzKCk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIHJlZnJlc2hDaGFydCgpIHtcclxuICAgIHRoaXMubmdPbkRlc3Ryb3koKTtcclxuICAgIHRoaXMuaW5pdENoYXJ0KCk7XHJcbiAgfVxyXG59XHJcbiIsImltcG9ydCB7IE5nTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IE5neEVjaGFydHNEaXJlY3RpdmUgfSBmcm9tICcuL25neC1lY2hhcnRzLmRpcmVjdGl2ZSc7XHJcblxyXG5ATmdNb2R1bGUoe1xyXG4gIGltcG9ydHM6IFtdLFxyXG4gIGRlY2xhcmF0aW9uczogW1xyXG4gICAgTmd4RWNoYXJ0c0RpcmVjdGl2ZVxyXG4gIF0sXHJcbiAgZXhwb3J0czogW1xyXG4gICAgTmd4RWNoYXJ0c0RpcmVjdGl2ZVxyXG4gIF1cclxufSlcclxuZXhwb3J0IGNsYXNzIE5neEVjaGFydHNNb2R1bGUgeyB9XHJcbiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFDQSxBQUVBO0lBQ0Usc0JBQW9CLFFBQXVCO1FBQXZCLGFBQVEsR0FBUixRQUFRLENBQWU7S0FBSzs7Ozs7SUFFekMsZUFBRTs7OztJQUFULFVBQVUsT0FBc0I7UUFDOUIsT0FBTyxJQUFJLFlBQVksQ0FBQyxPQUFPLENBQUMsQ0FBQztLQUNsQzs7Ozs7O0lBRUQsK0JBQVE7Ozs7O0lBQVIsVUFBWSxHQUFXO1FBQ3JCLElBQUksSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsRUFBRTs7Z0JBQ2hCLEtBQUssR0FBTSxJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxDQUFDLFlBQVk7WUFFaEQsSUFBSSxLQUFLLEtBQUssU0FBUyxJQUFJLEtBQUssS0FBSyxJQUFJLEVBQUU7Z0JBQ3pDLE9BQU8sRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDO2FBQ2xCO1NBQ0Y7UUFDRCxPQUFPLEtBQUssRUFBRSxDQUFDO0tB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